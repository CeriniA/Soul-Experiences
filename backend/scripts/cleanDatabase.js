import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Cargar variables de entorno desde la ra√≠z del backend
dotenv.config();

// Importar modelos
import User from '../models/User.js';
import Retreat from '../models/Retreat.js';
import Lead from '../models/Lead.js';
import Testimonial from '../models/Testimonial.js';
import TestimonialToken from '../models/TestimonialToken.js';
import Setting from '../models/Setting.js';

const cleanDatabase = async () => {
  try {
    console.log('üîå Conectando a MongoDB...');
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Conectado a MongoDB\n');

    console.log('üóëÔ∏è  LIMPIANDO BASE DE DATOS...\n');

    // Eliminar todas las colecciones (excepto users)
    const collections = [
      { model: Retreat, name: 'Retiros' },
      { model: Lead, name: 'Leads' },
      { model: Testimonial, name: 'Testimonios' },
      { model: TestimonialToken, name: 'Tokens de Testimonio' },
      { model: Setting, name: 'Configuraci√≥n' }
    ];

    for (const { model, name } of collections) {
      const count = await model.countDocuments();
      if (count > 0) {
        await model.deleteMany({});
        console.log(`‚úÖ ${name}: ${count} documento(s) eliminado(s)`);
      } else {
        console.log(`‚ÑπÔ∏è  ${name}: Ya estaba vac√≠o`);
      }
    }

    // Verificar usuario admin
    const userCount = await User.countDocuments();
    console.log(`\n‚ÑπÔ∏è  Usuarios: ${userCount} (no se eliminan)`);

    console.log('\n‚úÖ BASE DE DATOS LIMPIADA EXITOSAMENTE\n');
    console.log('üìä Estado actual:');
    console.log('   ‚Ä¢ Retiros: 0');
    console.log('   ‚Ä¢ Leads: 0');
    console.log('   ‚Ä¢ Testimonios: 0');
    console.log('   ‚Ä¢ Tokens: 0');
    console.log('   ‚Ä¢ Configuraci√≥n: 0');
    console.log(`   ‚Ä¢ Usuarios: ${userCount} (preservados)\n`);

  } catch (error) {
    console.error('‚ùå Error al limpiar la base de datos:', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Conexi√≥n cerrada');
    process.exit(0);
  }
};

cleanDatabase();
